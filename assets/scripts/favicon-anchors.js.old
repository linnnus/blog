function unique(arr) {
	return [...new Set(arr)];
}

function loadImageFromBlob(blob) {
	return new Promise((resolve, reject) => {
		const url = URL.createObjectURL(blob);

		const image = new Image();
		image.src = url;

		image.onload = () => {
			URL.revokeObjectURL(url);
			resolve(image);
		};

		image.onerror = event => {
			URL.revokeObjectURL(url);
			reject(event);
		};
	});
}

(async function() {
	const anchors = [...document.querySelectorAll("a[href^=http]")];

	// There may be multiple links to the same domain, so we deduplicate the list of domains.
	const domains = unique(anchors.map(a => new URL(a.href).hostname));

	// Fetch a spritesheet containing the favicons stacked vertically.
	const spriteSheetUrl = `https://favicon.yandex.net/favicon/${domains.join("/")}`;
	const response = await fetch(spriteSheetUrl);
	const spriteSheetBlob = await response.blob();
	const spriteSheet = await loadImageFromBlob(spriteSheetBlob);

	for (const anchor of anchors) {
		const canvas = document.createElement("canvas");
		canvas.width = canvas.height = 16;
		canvas.classList.add("favicon");

		const { hostname } = new URL(anchor.href);
		const i = domains.indexOf(hostname);
		const ctx = canvas.getContext("2d");
		const w = spriteSheet.width; // size of sprites
		ctx.drawImage(spriteSheet, 0, i * w, w,            w,
		                           0, 0,     canvas.width, canvas.height);

		anchor.insertAdjacentElement("beforeend", canvas);
	}
})();
